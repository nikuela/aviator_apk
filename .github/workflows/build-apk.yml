name: Build Android APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Setup Android SDK with AIDL
      run: |
        echo "🚀 === INICIANDO CONFIGURACIÓN COMPLETA ANDROID SDK CON AIDL ==="
        
        # Variables de entorno principales
        export ANDROID_HOME=$PWD/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        export PATH=$PATH:$ANDROID_HOME/platform-tools
        
        # Crear directorios necesarios
        echo "📁 Creando estructura de directorios..."
        mkdir -p $ANDROID_HOME/cmdline-tools
        mkdir -p $ANDROID_HOME/platforms
        mkdir -p $ANDROID_HOME/build-tools
        mkdir -p $ANDROID_HOME/platform-tools
        
        echo "⬇️ === DESCARGANDO ANDROID SDK COMMAND LINE TOOLS ==="
        wget -q --show-progress https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        echo "📦 Extrayendo Command Line Tools..."
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        
        echo "📋 === ACEPTANDO TODAS LAS LICENCIAS AUTOMÁTICAMENTE ==="
        mkdir -p $ANDROID_HOME/licenses
        echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_HOME/licenses/android-sdk-license
        echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license
        echo -e "\nd975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_HOME/licenses/intel-android-extra-license
        
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1 || true
        
        echo "🔧 === INSTALANDO COMPONENTES ANDROID SDK ==="
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-33"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;34.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.2"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.0"
        
        echo "🛠️ === CONFIGURANDO PATH COMPLETO PARA AIDL ==="
        echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
        echo "$ANDROID_HOME/build-tools/33.0.2" >> $GITHUB_PATH
        echo "$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        
        # Configurar variables de entorno para pasos siguientes
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        
        echo "🔍 === VERIFICACIÓN COMPLETA DE AIDL ==="
        AIDL_FOUND=false
        for version in "34.0.0" "33.0.2" "33.0.0"; do
          AIDL_PATH="$ANDROID_HOME/build-tools/$version/aidl"
          if [ -f "$AIDL_PATH" ]; then
            echo "✅ AIDL encontrado en build-tools/$version"
            chmod +x "$AIDL_PATH"
            if "$AIDL_PATH" --help > /dev/null 2>&1; then
              echo "✅ AIDL funciona correctamente en versión $version"
              AIDL_FOUND=true
              break
            fi
          fi
        done
        
        if [ "$AIDL_FOUND" = false ]; then
          echo "🚨 ERROR: AIDL no encontrado"
          exit 1
        fi
        
        echo "🔧 === CONFIGURANDO PERMISOS ==="
        find $ANDROID_HOME/build-tools -name "*" -type f -exec chmod +x {} \; 2>/dev/null || true
        find $ANDROID_HOME/platform-tools -name "*" -type f -exec chmod +x {} \; 2>/dev/null || true
        
        echo "✅ Configuración de Android SDK completada"
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Setup Gradle
      run: |
        # Configurar gradle.properties
        cat > gradle.properties << EOF
        org.gradle.daemon=false
        org.gradle.parallel=true
        org.gradle.configureondemand=false
        org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m
        android.useAndroidX=true
        android.enableJetifier=true
        android.enableBuildCache=true
        EOF
        
        # Dar permisos a gradlew si existe
        if [ -f "gradlew" ]; then
          chmod +x gradlew
        fi
        
    - name: Clean project
      run: |
        if [ -f "gradlew" ]; then
          ./gradlew clean
        else
          gradle clean
        fi
        
    - name: Build APK
      run: |
        echo "🔨 === COMPILANDO APK ==="
        if [ -f "gradlew" ]; then
          ./gradlew assembleRelease --stacktrace --info
        else
          gradle assembleRelease --stacktrace --info
        fi
        
    - name: Verify APK
      run: |
        echo "🔍 === VERIFICANDO RESULTADOS ==="
        echo "📱 APKs generados:"
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          **/*.apk
          **/build/outputs/apk/**/*.apk
        retention-days: 30
        
    - name: Upload build reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-reports
        path: |
          **/build/reports/
          **/build/outputs/logs/
        retention-days: 7
