name: Android APK Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive # Asegura que los submódulos, como python-for-android, se clonen

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Usa una versión de Python compatible con Buildozer y Kivy

    - name: Install buildozer and other dependencies
      run: |
        python -m pip install --upgrade pip # Actualiza pip
        pip install buildozer cython # Instala Buildozer y Cython

    - name: Set up Java (JDK 17 is recommended for recent Android SDKs)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # Distribución de OpenJDK
        java-version: '17' # Versión de Java requerida por Android SDK y Buildozer

    - name: Accept Android SDK licenses
      run: |
        # Esto acepta todas las licencias automáticamente.
        # El 'yes |' simula la entrada 'y' por cada pregunta de licencia.
        # '>/dev/null' suprime la salida detallada de las licencias para mantener los logs limpios.
        # '|| true' asegura que el paso no falle si las licencias ya están aceptadas o hay una salida inesperada.
        yes | sdkmanager --licenses > /dev/null || true
      env:
        # Asegúrate de que las variables de entorno para el SDK estén disponibles si sdkmanager las necesita,
        # aunque 'buildozer' generalmente las configura.
        ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
        ANDROID_HOME: /usr/local/lib/android/sdk

    - name: Configure Buildozer for Android
      run: |
        # Inicializa buildozer. Esto creará el archivo buildozer.spec si no existe.
        # Es crucial que tu proyecto ya tenga un archivo buildozer.spec o que este paso lo cree.
        # Si ya tienes buildozer.spec en tu repositorio, este comando lo actualizará o verificará.
        buildozer init || true # Usamos '|| true' para que no falle si ya está inicializado

    - name: Build Android Debug APK
      run: |
        echo "🔧 Verificando configuración final..."
        java -version # Verifica la versión de Java
        python3 --version # Verifica la versión de Python
        buildozer --version # Verifica la versión de Buildozer
        echo "🚀 Iniciando build del APK..."
        # El comando principal para construir el APK.
        # '--verbose' proporciona más detalles en caso de errores.
        buildozer android debug --verbose
      env:
        # Define ANDROID_HOME y NDK_HOME para Buildozer si no se detectan automáticamente.
        # Los runners de GitHub Actions suelen tenerlos preconfigurados, pero es buena práctica incluirlos.
        ANDROID_HOME: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_NDK_HOME: /home/runner/.buildozer/android/platform/android-ndk-r25b # Asegúrate de que esta ruta coincida con la versión del NDK descargada.

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk # Asegúrate de que esta ruta sea donde buildozer guarda el APK (generalmente en la carpeta 'bin')
