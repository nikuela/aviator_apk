name: Build Android APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # ⚠️ CAMBIO CRÍTICO: Java 17 en lugar de Java 11
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Setup Android Project Structure
      run: |
        echo "🔍 === VERIFICANDO ESTRUCTURA DEL PROYECTO ==="
        
        # Verificar si existe un proyecto Android
        if [ ! -f "build.gradle" ] && [ ! -f "build.gradle.kts" ] && [ ! -f "settings.gradle" ]; then
          echo "❌ No se detectó proyecto Android. Creando estructura básica..."
          
          # Crear estructura mínima
          mkdir -p app/src/main/java/com/aviator/game
          mkdir -p app/src/main/res/{layout,values,drawable,mipmap-hdpi,mipmap-mdpi,mipmap-xhdpi,mipmap-xxhdpi,mipmap-xxxhdpi}
          mkdir -p app/src/main/res/xml
          
          # Crear settings.gradle
          cat > settings.gradle << 'GRADLE_EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
                maven { url 'https://jitpack.io' }
            }
        }
        
        rootProject.name = "AviatorGame"
        include ':app'
        GRADLE_EOF
          
          # Crear build.gradle raíz - VERSIÓN ACTUALIZADA
          cat > build.gradle << 'GRADLE_EOF'
        // Top-level build file where you can add configuration options common to all sub-projects/modules.
        plugins {
            id 'com.android.application' version '8.1.4' apply false
            id 'org.jetbrains.kotlin.android' version '1.9.10' apply false
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        GRADLE_EOF
          
          # Crear app/build.gradle - CONFIGURACIÓN ACTUALIZADA
          cat > app/build.gradle << 'GRADLE_EOF'
        plugins {
            id 'com.android.application'
        }
        
        android {
            namespace 'com.aviator.game'
            compileSdk 34
            
            defaultConfig {
                applicationId "com.aviator.game"
                minSdk 24
                targetSdk 34
                versionCode 1
                versionName "1.0"
                
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug
                }
                debug {
                    debuggable true
                    minifyEnabled false
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            
            buildFeatures {
                viewBinding true
            }
        }
        
        dependencies {
            implementation 'androidx.core:core:1.12.0'
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.10.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'androidx.lifecycle:lifecycle-viewmodel:2.7.0'
            implementation 'androidx.lifecycle:lifecycle-livedata:2.7.0'
            
            // Para juegos
            implementation 'androidx.cardview:cardview:1.0.0'
            implementation 'androidx.recyclerview:recyclerview:1.3.2'
            
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        GRADLE_EOF
          
          # Crear AndroidManifest.xml
          cat > app/src/main/AndroidManifest.xml << 'XML_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">
            
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            
            <application
                android:allowBackup="true"
                android:dataExtractionRules="@xml/data_extraction_rules"
                android:fullBackupContent="@xml/backup_rules"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:supportsRtl="true"
                android:theme="@style/Theme.AviatorGame"
                tools:targetApi="31">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:screenOrientation="portrait"
                    android:theme="@style/Theme.AviatorGame">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        XML_EOF
          
          # Crear MainActivity.java
          cat > app/src/main/java/com/aviator/game/MainActivity.java << 'JAVA_EOF'
        package com.aviator.game;
        
        import android.app.Activity;
        import android.os.Bundle;
        import android.view.View;
        import android.widget.Button;
        import android.widget.TextView;
        import android.widget.Toast;
        import java.util.Random;
        
        public class MainActivity extends Activity {
            private TextView multiplierText;
            private Button startButton;
            private Button cashOutButton;
            private boolean gameRunning = false;
            private double currentMultiplier = 1.0;
            private Random random = new Random();
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.activity_main);
                
                initViews();
                setupButtons();
            }
            
            private void initViews() {
                multiplierText = findViewById(R.id.multiplierText);
                startButton = findViewById(R.id.startButton);
                cashOutButton = findViewById(R.id.cashOutButton);
                
                multiplierText.setText("1.00x");
                cashOutButton.setEnabled(false);
            }
            
            private void setupButtons() {
                startButton.setOnClickListener(v -> startGame());
                cashOutButton.setOnClickListener(v -> cashOut());
            }
            
            private void startGame() {
                if (!gameRunning) {
                    gameRunning = true;
                    currentMultiplier = 1.0;
                    startButton.setEnabled(false);
                    cashOutButton.setEnabled(true);
                    
                    // Simular juego del aviador
                    simulateAviatorGame();
                }
            }
            
            private void simulateAviatorGame() {
                new Thread(() -> {
                    try {
                        while (gameRunning && currentMultiplier < 10.0) {
                            Thread.sleep(100);
                            currentMultiplier += 0.01;
                            
                            runOnUiThread(() -> {
                                multiplierText.setText(String.format("%.2fx", currentMultiplier));
                            });
                            
                            // Probabilidad de crash
                            if (random.nextDouble() < 0.01) {
                                crash();
                                break;
                            }
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }).start();
            }
            
            private void cashOut() {
                if (gameRunning) {
                    gameRunning = false;
                    startButton.setEnabled(true);
                    cashOutButton.setEnabled(false);
                    
                    Toast.makeText(this, "Cash out at " + String.format("%.2fx", currentMultiplier), 
                                 Toast.LENGTH_SHORT).show();
                }
            }
            
            private void crash() {
                gameRunning = false;
                runOnUiThread(() -> {
                    Toast.makeText(this, "CRASHED at " + String.format("%.2fx", currentMultiplier), 
                                 Toast.LENGTH_LONG).show();
                    startButton.setEnabled(true);
                    cashOutButton.setEnabled(false);
                    multiplierText.setText("1.00x");
                });
            }
        }
        JAVA_EOF
          
          # Crear layout principal
          cat > app/src/main/res/layout/activity_main.xml << 'XML_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            android:padding="16dp"
            android:gravity="center"
            android:background="#1a1a2e">
            
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="AVIATOR GAME"
                android:textSize="32sp"
                android:textColor="#ffffff"
                android:textStyle="bold"
                android:layout_marginBottom="50dp" />
            
            <TextView
                android:id="@+id/multiplierText"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="1.00x"
                android:textSize="48sp"
                android:textColor="#00ff00"
                android:textStyle="bold"
                android:layout_marginBottom="50dp" />
            
            <Button
                android:id="@+id/startButton"
                android:layout_width="200dp"
                android:layout_height="60dp"
                android:text="START GAME"
                android:textSize="18sp"
                android:textColor="#ffffff"
                android:background="#ff6b6b"
                android:layout_marginBottom="20dp" />
            
            <Button
                android:id="@+id/cashOutButton"
                android:layout_width="200dp"
                android:layout_height="60dp"
                android:text="CASH OUT"
                android:textSize="18sp"
                android:textColor="#ffffff"
                android:background="#4ecdc4" />
        </LinearLayout>
        XML_EOF
          
          # Crear strings.xml
          cat > app/src/main/res/values/strings.xml << 'XML_EOF'
        <resources>
            <string name="app_name">Aviator Game</string>
        </resources>
        XML_EOF
          
          # Crear colors.xml
          cat > app/src/main/res/values/colors.xml << 'XML_EOF'
        <resources>
            <color name="purple_200">#FFBB86FC</color>
            <color name="purple_500">#FF6200EE</color>
            <color name="purple_700">#FF3700B3</color>
            <color name="teal_200">#FF03DAC5</color>
            <color name="teal_700">#FF018786</color>
            <color name="black">#FF000000</color>
            <color name="white">#FFFFFFFF</color>
        </resources>
        XML_EOF
          
          # Crear themes.xml
          cat > app/src/main/res/values/themes.xml << 'XML_EOF'
        <resources>
            <style name="Theme.AviatorGame" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="colorPrimary">@color/purple_500</item>
                <item name="colorPrimaryVariant">@color/purple_700</item>
                <item name="colorOnPrimary">@color/white</item>
                <item name="colorSecondary">@color/teal_200</item>
                <item name="colorSecondaryVariant">@color/teal_700</item>
                <item name="colorOnSecondary">@color/black</item>
            </style>
        </resources>
        XML_EOF
          
          # Crear archivos XML de seguridad
          mkdir -p app/src/main/res/xml
          cat > app/src/main/res/xml/backup_rules.xml << 'XML_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <full-backup-content>
            <!-- Exclude specific files or directories -->
        </full-backup-content>
        XML_EOF
          
          cat > app/src/main/res/xml/data_extraction_rules.xml << 'XML_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <data-extraction-rules>
            <cloud-backup>
                <!-- Exclude specific files or directories -->
            </cloud-backup>
            <device-transfer>
                <!-- Exclude specific files or directories -->
            </device-transfer>
        </data-extraction-rules>
        XML_EOF
          
          # Crear iconos básicos (usando iconos del sistema)
          echo "Creando iconos básicos..."
          mkdir -p app/src/main/res/mipmap-hdpi
          mkdir -p app/src/main/res/mipmap-mdpi  
          mkdir -p app/src/main/res/mipmap-xhdpi
          mkdir -p app/src/main/res/mipmap-xxhdpi
          mkdir -p app/src/main/res/mipmap-xxxhdpi
          
          # Crear proguard-rules.pro
          cat > app/proguard-rules.pro << 'PROGUARD_EOF'
        # Add project specific ProGuard rules here.
        -keep public class * extends android.app.Activity
        -keep public class * extends android.app.Application
        -keep public class * extends android.app.Service
        -keep public class * extends android.content.BroadcastReceiver
        -keep public class * extends android.content.ContentProvider
        PROGUARD_EOF
          
          echo "✅ Estructura completa de proyecto Aviator creada"
        else
          echo "✅ Proyecto Android existente detectado"
        fi
        
        # Configurar gradle.properties - CONFIGURACIÓN CRÍTICA
        cat > gradle.properties << 'PROPS_EOF'
        # Gradle properties for Android build
        org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m -Dfile.encoding=UTF-8
        org.gradle.parallel=true
        org.gradle.caching=true
        org.gradle.daemon=false
        
        # Android properties
        android.useAndroidX=true
        android.enableJetifier=true
        android.enableBuildCache=true
        android.nonTransitiveRClass=false
        android.defaults.buildfeatures.buildconfig=true
        android.defaults.buildfeatures.aidl=true
        android.defaults.buildfeatures.renderscript=true
        PROPS_EOF
        
        # Crear gradle wrapper si no existe
        if [ ! -f "gradlew" ]; then
          echo "Creando Gradle Wrapper..."
          gradle wrapper --gradle-version=8.4
        fi
        
        chmod +x gradlew
        
        echo "📋 Estructura final del proyecto:"
        ls -la | grep -E "\.(gradle|properties)$" || echo "Archivos gradle creados"
        ls -la app/ | grep -E "\.(gradle|properties)$" || echo "Archivos gradle de app creados"
        
    - name: Clean project
      run: |
        echo "🧹 Limpiando proyecto..."
        if [ -f "gradlew" ]; then
          ./gradlew clean --stacktrace
        else
          gradle clean --stacktrace
        fi
        
    - name: Build Debug APK
      run: |
        echo "🔨 === COMPILANDO APK DEBUG ==="
        if [ -f "gradlew" ]; then
          ./gradlew assembleDebug --stacktrace --info
        else
          gradle assembleDebug --stacktrace --info
        fi
        
    - name: Build Release APK
      run: |
        echo "🔨 === COMPILANDO APK RELEASE ==="
        if [ -f "gradlew" ]; then
          ./gradlew assembleRelease --stacktrace --info
        else
          gradle assembleRelease --stacktrace --info
        fi
        
    - name: Verify APK
      run: |
        echo "🔍 === VERIFICANDO RESULTADOS ==="
        echo "📱 APKs generados:"
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
        # Verificar que al menos un APK fue generado
        APK_COUNT=$(find . -name "*.apk" -type f | wc -l)
        if [ $APK_COUNT -eq 0 ]; then
          echo "❌ No se generaron APKs"
          exit 1
        else
          echo "✅ Se generaron $APK_COUNT APKs"
        fi
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aviator-apk-${{ github.run_number }}
        path: |
          **/*.apk
          **/build/outputs/apk/**/*.apk
        retention-days: 30
        
    - name: Upload build reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-reports-${{ github.run_number }}
        path: |
          **/build/reports/
          **/build/outputs/logs/
        retention-days: 7
