name: Build Aviator APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        ndk-version: 25.2.9519653
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Setup Android Project Structure
      run: |
        # Crear estructura de proyecto Android básica
        mkdir -p app/src/main/java/com/aviator/game
        mkdir -p app/src/main/res/layout
        mkdir -p app/src/main/res/values
        mkdir -p app/src/main/res/drawable
        mkdir -p app/src/main/res/mipmap-hdpi
        mkdir -p app/src/main/res/mipmap-mdpi
        mkdir -p app/src/main/res/mipmap-xhdpi
        mkdir -p app/src/main/res/mipmap-xxhdpi
        mkdir -p app/src/main/res/mipmap-xxxhdpi
        
        # Crear build.gradle del proyecto raíz
        cat > build.gradle << 'BUILDEOF'
        buildscript {
            ext.kotlin_version = "1.9.10"
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.1.2'
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }

        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        BUILDEOF
        
        # Crear settings.gradle
        echo "include ':app'" > settings.gradle
        
        # Crear build.gradle de la app
        cat > app/build.gradle << 'APPEOF'
        plugins {
            id 'com.android.application'
            id 'org.jetbrains.kotlin.android'
        }

        android {
            namespace 'com.aviator.game'
            compileSdk 34

            defaultConfig {
                applicationId "com.aviator.game"
                minSdk 21
                targetSdk 34
                versionCode 1
                versionName "1.0"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            
            kotlinOptions {
                jvmTarget = '17'
            }
        }

        dependencies {
            implementation 'androidx.core:core-ktx:1.12.0'
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.10.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        APPEOF
        
        # Crear gradle.properties
        cat > gradle.properties << 'PROPEOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        kotlin.code.style=official
        android.nonTransitiveRClass=true
        PROPEOF
        
        # Crear AndroidManifest.xml
        cat > app/src/main/AndroidManifest.xml << 'MANIFESTEOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:theme="@style/Theme.AviatorGame">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        MANIFESTEOF
        
        # Crear MainActivity.kt
        cat > app/src/main/java/com/aviator/game/MainActivity.kt << 'KTEOF'
        package com.aviator.game

        import androidx.appcompat.app.AppCompatActivity
        import android.os.Bundle
        import android.webkit.WebView
        import android.webkit.WebViewClient

        class MainActivity : AppCompatActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContentView(R.layout.activity_main)
                
                val webView = findViewById<WebView>(R.id.webview)
                webView.webViewClient = WebViewClient()
                webView.settings.javaScriptEnabled = true
                webView.settings.domStorageEnabled = true
                
                // Cargar tu juego Aviator aquí
                webView.loadUrl("https://aviator-game.com")
            }
        }
        KTEOF
        
        # Crear layout activity_main.xml
        cat > app/src/main/res/layout/activity_main.xml << 'LAYOUTEOF'
        <?xml version="1.0" encoding="utf-8"?>
        <androidx.constraintlayout.widget.ConstraintLayout 
            xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:app="http://schemas.android.com/apk/res-auto"
            xmlns:tools="http://schemas.android.com/tools"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            tools:context=".MainActivity">

            <WebView
                android:id="@+id/webview"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent" />

        </androidx.constraintlayout.widget.ConstraintLayout>
        LAYOUTEOF
        
        # Crear strings.xml
        cat > app/src/main/res/values/strings.xml << 'STRINGSEOF'
        <resources>
            <string name="app_name">Aviator Game</string>
        </resources>
        STRINGSEOF
        
        # Crear themes.xml
        cat > app/src/main/res/values/themes.xml << 'THEMESEOF'
        <resources xmlns:tools="http://schemas.android.com/tools">
            <style name="Theme.AviatorGame" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
                <item name="colorPrimary">@color/purple_500</item>
                <item name="colorPrimaryVariant">@color/purple_700</item>
                <item name="colorOnPrimary">@color/white</item>
                <item name="colorSecondary">@color/teal_200</item>
                <item name="colorSecondaryVariant">@color/teal_700</item>
                <item name="colorOnSecondary">@color/black</item>
                <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
            </style>
        </resources>
        THEMESEOF
        
        # Crear colors.xml
        cat > app/src/main/res/values/colors.xml << 'COLORSEOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="purple_200">#FFBB86FC</color>
            <color name="purple_500">#FF6200EE</color>
            <color name="purple_700">#FF3700B3</color>
            <color name="teal_200">#FF03DAC5</color>
            <color name="teal_700">#FF018786</color>
            <color name="black">#FF000000</color>
            <color name="white">#FFFFFFFF</color>
        </resources>
        COLORSEOF
        
        # Crear gradle-wrapper.properties
        mkdir -p gradle/wrapper
        cat > gradle/wrapper/gradle-wrapper.properties << 'WRAPPEREOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        WRAPPEREOF
        
        # Crear proguard-rules.pro
        cat > app/proguard-rules.pro << 'PROGUARDEOF'
        # Add project specific ProGuard rules here.
        -keep class * {
            public private *;
        }
        PROGUARDEOF
        
        # Crear gradlew si no existe
        if [ ! -f "gradlew" ]; then
          cat > gradlew << 'GRADLEWEOF'
        #!/bin/sh
        APP_HOME="$(cd "$(dirname "$0")" && pwd -P)"
        CLASSPATH="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
        if [ -n "$JAVA_HOME" ]; then
            JAVACMD="$JAVA_HOME/bin/java"
        else
            JAVACMD="java"
        fi
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
        exec "$JAVACMD" $DEFAULT_JVM_OPTS -cp "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
        GRADLEWEOF
          chmod +x gradlew
        fi
        
        # Crear icono launcher básico
        echo "Creando iconos básicos..."
        
        # Verificar estructura creada
        ls -la app/src/main/res/
        
    - name: Make gradlew executable
      run: chmod +x gradlew
        
    - name: Clean project
      run: ./gradlew clean
        
    - name: Build Debug APK
      run: ./gradlew assembleDebug
        
    - name: Build Release APK
      run: ./gradlew assembleRelease
        
    - name: Verify APK
      run: |
        ls -la app/build/outputs/apk/debug/
        ls -la app/build/outputs/apk/release/
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aviator-apk
        path: |
          app/build/outputs/apk/debug/*.apk
          app/build/outputs/apk/release/*.apk
          
    - name: Upload build reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-reports
        path: |
          app/build/reports/
          build/reports/
          
    - name: Complete job
      run: |
        echo "Build completed successfully!"
        echo "APK files generated:"
        find . -name "*.apk" -type f
