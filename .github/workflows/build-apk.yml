name: Build Android APK

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Setup Android SDK with AIDL
      run: |
        echo "üöÄ === INICIANDO CONFIGURACI√ìN COMPLETA ANDROID SDK CON AIDL ==="
        
        # Variables de entorno principales
        export ANDROID_HOME=$PWD/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        export PATH=$PATH:$ANDROID_HOME/platform-tools
        
        # Crear directorios necesarios
        echo "üìÅ Creando estructura de directorios..."
        mkdir -p $ANDROID_HOME/cmdline-tools
        mkdir -p $ANDROID_HOME/platforms
        mkdir -p $ANDROID_HOME/build-tools
        mkdir -p $ANDROID_HOME/platform-tools
        
        echo "‚¨áÔ∏è === DESCARGANDO ANDROID SDK COMMAND LINE TOOLS ==="
        wget -q --show-progress https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        echo "üì¶ Extrayendo Command Line Tools..."
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools $ANDROID_HOME/cmdline-tools/latest
        
        echo "üìã === ACEPTANDO TODAS LAS LICENCIAS AUTOM√ÅTICAMENTE ==="
        mkdir -p $ANDROID_HOME/licenses
        echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_HOME/licenses/android-sdk-license
        echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license
        echo -e "\nd975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_HOME/licenses/intel-android-extra-license
        
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1 || true
        
        echo "üîß === INSTALANDO COMPONENTES ANDROID SDK ==="
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-33"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;34.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.2"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;33.0.0"
        
        echo "üõ†Ô∏è === CONFIGURANDO PATH COMPLETO PARA AIDL ==="
        echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
        echo "$ANDROID_HOME/build-tools/33.0.2" >> $GITHUB_PATH
        echo "$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        
        # Configurar variables de entorno para pasos siguientes
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        
        echo "üîç === VERIFICACI√ìN COMPLETA DE AIDL ==="
        AIDL_FOUND=false
        for version in "34.0.0" "33.0.2" "33.0.0"; do
          AIDL_PATH="$ANDROID_HOME/build-tools/$version/aidl"
          if [ -f "$AIDL_PATH" ]; then
            echo "‚úÖ AIDL encontrado en build-tools/$version"
            chmod +x "$AIDL_PATH"
            if "$AIDL_PATH" --help > /dev/null 2>&1; then
              echo "‚úÖ AIDL funciona correctamente en versi√≥n $version"
              AIDL_FOUND=true
              break
            fi
          fi
        done
        
        if [ "$AIDL_FOUND" = false ]; then
          echo "üö® ERROR: AIDL no encontrado"
          exit 1
        fi
        
        echo "üîß === CONFIGURANDO PERMISOS ==="
        find $ANDROID_HOME/build-tools -name "*" -type f -exec chmod +x {} \; 2>/dev/null || true
        find $ANDROID_HOME/platform-tools -name "*" -type f -exec chmod +x {} \; 2>/dev/null || true
        
        echo "‚úÖ Configuraci√≥n de Android SDK completada"
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Setup Android Project
      run: |
        echo "üîç === VERIFICANDO ESTRUCTURA DEL PROYECTO ==="
        
        # Verificar si existe un proyecto Android
        if [ ! -f "build.gradle" ] && [ ! -f "build.gradle.kts" ] && [ ! -f "settings.gradle" ]; then
          echo "‚ùå No se detect√≥ proyecto Android. Creando estructura b√°sica..."
          
          # Crear estructura m√≠nima
          mkdir -p app/src/main/java/com/example/myapp
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/xml
          
          # Crear settings.gradle
          cat > settings.gradle << 'GRADLE_EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }
        rootProject.name = "MyApp"
        include ':app'
        GRADLE_EOF
          
          # Crear build.gradle ra√≠z
          cat > build.gradle << 'GRADLE_EOF'
        plugins {
            id 'com.android.application' version '8.1.4' apply false
        }
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        GRADLE_EOF
          
          # Crear app/build.gradle
          cat > app/build.gradle << 'GRADLE_EOF'
        plugins {
            id 'com.android.application'
        }
        android {
            namespace 'com.example.myapp'
            compileSdk 34
            defaultConfig {
                applicationId "com.example.myapp"
                minSdk 21
                targetSdk 34
                versionCode 1
                versionName "1.0"
            }
            buildTypes {
                release {
                    minifyEnabled false
                    signingConfig signingConfigs.debug
                }
            }
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.10.0'
        }
        GRADLE_EOF
          
          # Crear AndroidManifest.xml
          cat > app/src/main/AndroidManifest.xml << 'XML_EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <application
                android:allowBackup="true"
                android:icon="@android:drawable/ic_launcher"
                android:label="MyApp"
                android:theme="@android:style/Theme.Material.Light">
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        XML_EOF
          
          # Crear MainActivity.java
          cat > app/src/main/java/com/example/myapp/MainActivity.java << 'JAVA_EOF'
        package com.example.myapp;
        import android.app.Activity;
        import android.os.Bundle;
        public class MainActivity extends Activity {
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
            }
        }
        JAVA_EOF
          
          # Crear strings.xml
          mkdir -p app/src/main/res/values
          cat > app/src/main/res/values/strings.xml << 'XML_EOF'
        <resources>
            <string name="app_name">MyApp</string>
        </resources>
        XML_EOF
          
          echo "‚úÖ Estructura b√°sica de proyecto Android creada"
        else
          echo "‚úÖ Proyecto Android existente detectado"
        fi
        
        # Configurar gradle.properties
        cat > gradle.properties << 'PROPS_EOF'
        org.gradle.daemon=false
        org.gradle.parallel=true
        org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=1024m
        android.useAndroidX=true
        android.enableJetifier=true
        android.enableBuildCache=true
        PROPS_EOF
        
        # Crear o actualizar gradlew
        if [ ! -f "gradlew" ]; then
          gradle wrapper --gradle-version=8.0
        fi
        chmod +x gradlew
        
        echo "üìã Estructura final del proyecto:"
        ls -la *.gradle* 2>/dev/null || echo "No gradle files in root"
        ls -la app/*.gradle* 2>/dev/null || echo "No gradle files in app"
        
    - name: Clean project
      run: |
        if [ -f "gradlew" ]; then
          ./gradlew clean
        else
          gradle clean
        fi
        
    - name: Build APK
      run: |
        echo "üî® === COMPILANDO APK ==="
        if [ -f "gradlew" ]; then
          ./gradlew assembleRelease --stacktrace --info
        else
          gradle assembleRelease --stacktrace --info
        fi
        
    - name: Verify APK
      run: |
        echo "üîç === VERIFICANDO RESULTADOS ==="
        echo "üì± APKs generados:"
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          **/*.apk
          **/build/outputs/apk/**/*.apk
        retention-days: 30
        
    - name: Upload build reports
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-reports
        path: |
          **/build/reports/
          **/build/outputs/logs/
        retention-days: 7
